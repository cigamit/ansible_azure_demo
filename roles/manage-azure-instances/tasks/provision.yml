################### Resources ###################

- name: Pass variables to next playbooks
  set_stats:
    data:
      deploy_try: "{{ deploy_try | default(1) | int }}"

- name: Set resource facts
  set_fact:
    azure_resource_group:  "{{ env }}-resource"
    azure_storage_account: "{{ (env + 'storage') | lower | regex_replace('[^0-9a-z]+', '') }}"
    azure_virtual_network: "{{ env }}-network"
    azure_virtual_subnet:  "{{ (env + 'subnet')  | lower | regex_replace('[^0-9a-z]+', '') }}"

# Create a resource group
- name: Azure | Create a resource group
  azure_rm_resourcegroup:
    name: "{{ azure_resource_group }}"
    location: "{{ azure_location }}"
    state: present

# Create a virtual network
- name: Azure | Create virtual network
  azure_rm_virtualnetwork:
    resource_group: "{{ azure_resource_group }}"  
    name: "{{ azure_virtual_network }}"
    address_prefixes_cidr:
        - "{{ networks[env].ptr_zone_cidr }}"
    dns_servers: "{{ networks[env].dns_servers }}"

# Create a subnet and associate with the virtual network
- name: Create a subnet
  azure_rm_subnet:
    resource_group: "{{ azure_resource_group }}"
    name: "{{ azure_virtual_subnet }}"
    virtual_network_name: "{{ azure_virtual_network }}"
    address_prefix_cidr: "{{ networks[env].ptr_zone_cidr }}"


################### Build Instances ###################
- name: Launch instance
  azure_rm_virtualmachine:
    resource_group: "{{ azure_resource_group }}"
    name: "{{ vm_name }}"
    vm_size: "{{ vms[vm].instance_type }}"
    managed_disk_type: "{{ azure_storage_account_type }}"
    admin_username: "{{ azure_admin_user }}"
    admin_password: "{{ azure_admin_pass }}"
    started: True
    os_type: "{{ vms[vm].type }}"
    state: present
    public_ip_allocation_method: Dynamic
    virtual_network_name: "{{ azure_virtual_network }}"
    subnet_name: "{{ azure_virtual_subnet }}"
    open_ports: "{{ vms[vm].ports }}"
    tags:
      Env: "{{ env }}"
      Name: "{{ vm_name }}"
      App: AnsibleTest
      Type: "{{ vms[vm].type }}"
    image:
      publisher: "{{ vms[vm].publisher }}"
      offer: "{{ vms[vm].offer }}"
      version: "{{ vms[vm].version }}"
      sku: "{{ vms[vm].sku }}"
  register: vm_job

################### Custom VM Extension ###################
- name: Windows create VM Extension
  azure_rm_virtualmachineextension:
    resource_group: "{{ azure_resource_group }}"    
    name: custom-script
    virtual_machine_name: "{{ vm_name }}"
    publisher: Microsoft.Compute
    virtual_machine_extension_type: CustomScriptExtension
    type_handler_version: "1.9"
    settings: '{"fileUris": ["https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1"],"commandToExecute": "powershell.exe -ExecutionPolicy Unrestricted -File ConfigureRemotingForAnsible.ps1 -ForceNewSSLCert -EnableCredSSP"}'
    auto_upgrade_minor_version: true
  when: vms[vm].type == "Windows"

################### Add Hosts ###################
- set_fact:
    public_ip: "{{ vm_job.ansible_facts.azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties.publicIPAddress.properties.ipAddress }}"
    private_ip: "{{ vm_job.ansible_facts.azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties.privateIPAddress }}"

- name: Add new instance to host group
  add_host:
    hostname: "{{ vm_name }}"
    ansible_host: "{{ public_ip }}"
    private_ip: "{{ private_ip }}"
    ansible_port: "{{ vms[vm].ansible_port | default(omit) }}"
    ansible_user: "{{ azure_admin_user }}"
    ansible_password: "{{ azure_admin_pass }}"
    ansible_connection: "{{ vms[vm].ansible_connection | default(omit) }}"
    ansible_winrm_transport: "{{ vms[vm].ansible_winrm_transport | default(omit) }}"
    ansible_winrm_server_cert_validation: "{{ vms[vm].ansible_winrm_server_cert_validation | default(omit) }}"
    groups: new_deploy
  no_log: true

- name: Add Host to Tower Inventory
  uri:
    url:  "{{ lookup('env', 'TOWER_HOST') }}/api/v2/hosts/"
    method: POST
    user: "{{ lookup('env', 'TOWER_USERNAME') }}"
    password: "{{ lookup('env', 'TOWER_PASSWORD') }}"
    body: "{{ lookup('template','tower_host.json.j2') }}"
    body_format: json
    validate_certs: False
    force_basic_auth: yes
    status_code:
      - 200
      - 201
      - 400
  register: response
  changed_when: response.status == 201

################### Wait for Instances ###################
- name: Wait for Instances to come up
  wait_for_connection:
  delegate_to: "{{ item }}"
  with_items: "{{ groups['new_deploy'] }}" 


