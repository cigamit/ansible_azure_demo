#
# --------------------------------- AD.1.1.1.0.0 ---------------------------------
#
- name: AD.1.1.1.0.0 | PATCH_RHEL | PASSWORD | Implement all password controls for key common services (PAM)
  pamd:
    name: "{{ item.name }}"
    type: "{{ item.type }}"
    control: "{{ item.control }}"
    module_path: "{{ item.mpath }}"
    new_type: "{{ item.ntype }}"
    new_control: "{{ item.ncontrol }}"
    new_module_path: "{{ item.nmpath }}"
    state: "{{ item.state }}"
  when: ad_1_1_1_0_0
  with_items: "{{ harden_rhel7_pam_services }}"
  register: __ad_1_1_1_0_0
  tags:
    - AD.1.1.1.0.0
    - patch
    - password
    - S

- name: AD.1.1.1.0.0 | AUDIT_RHEL | PASSWORD | Implement all password controls for key common services (PAM)
  debug:
    msg: "{% set output = [] %}\
      {% for x in (__ad_1_1_1_0_0.results) %}\
        {% if x.changed %}{{ output.append( x ) }}{% endif %}\
      {% endfor %}\
      {{output}}"
  when:
    - ad_1_1_1_0_0
    - ansible_check_mode
    - __ad_1_1_1_0_0 | changed
  tags:
    - AD.1.1.1.0.0
    - audit
    - password
    - S

#
# --------------------------------- AD.1.1.1.1 ---------------------------------
#
- name: AD.1.1.1.1 | PATCH_RHEL | PASSWORD | Default maximum password age (login.defs)
  lineinfile:
    regexp: '(^PASS_MAX_DAYS)\s*(\d*)'
    line: '\1 {{ harden_rhel7_pass_max_days }}'
    dest: /etc/login.defs
    backrefs: yes
  when: ad_1_1_1_1
  register: __ad_1_1_1_1
  tags:
    - AD.1.1.1.1
    - patch
    - password
    - S

- name: AD.1.1.1.1 | AUDIT_RHEL | PASSWORD | Default maximum password age (login.defs)
  debug:
    msg: "{{ __ad_1_1_1_1.msg }}"
  when: 
    - ad_1_1_1_1
    - ansible_check_mode
    - __ad_1_1_1_1 | changed
  tags:
    - AD.1.1.1.1
    - audit
    - password
    - S

#
# --------------------------------- AD.1.1.1.2 ---------------------------------
#
- name: AD.1.1.1.2 | GATHER_INFO_RHEL | PASSWORD | Per-userid password age setting, in days (shadow)
  shell: awk -F':' '($1 != "root" && $2 != "*" && $2 != "!!") { print $1}' /etc/shadow
  register: shadow_users
  changed_when: no
  check_mode: no
  tags:
    - AD.1.1.1.2
    - audit
    - password 
    - S

- name: AD.1.1.1.2 | PATCH_RHEL | PASSWORD | Per-userid password age setting, in days (shadow)
  chage: 
    user: "{{ item }}"
    sp_max: "{{ harden_rhel7_pass_max_days }}"
  when: ad_1_1_1_2
  register: __ad_1_1_1_2
  with_items:
    - "{{ shadow_users.stdout_lines | difference(harden_rhel7_exclude_users) }}"
  tags: 
    - AD.1.1.1.2
    - patch
    - password 
    - S

- name: AD.1.1.1.2 | GATHER_INFO_RHEL | PASSWORD | Per-userid password age setting, in days (shadow)
  shell: awk -F':' '($1 != "root" && $2 != "*" && $2 != "!!") { print $1 " " $5}' /etc/shadow
  register: shadow_users_max
  changed_when: no
  check_mode: no
  tags:
    - AD.1.1.1.2
    - audit
    - password 
    - S

- name: AD.1.1.1.2 | AUDIT_RHEL | PASSWORD | Per-userid password age setting, in days (shadow)
  debug:
    msg: "{{ shadow_users_max.stdout_lines }}"
  when: 
    - ad_1_1_1_2
    - ansible_check_mode
    - __ad_1_1_1_2 | changed
  tags:
    - AD.1.1.1.2
    - audit
    - password
    - S

#
# --------------------------------- AD.1.1.2 ---------------------------------
#
- name: AD.1.1.2 | PATCH_RHEL | PASSWORD | Default password minimal length (login.defs)
  lineinfile:
    regexp: '(^PASS_MIN_LEN)\s*(\d*)'
    line: '\1 {{ harden_rhel7_pass_min_len }}'
    dest: /etc/login.defs
    backrefs: yes
  when: ad_1_1_2
  register: __ad_1_1_2
  tags:
    - AD.1.1.2
    - patch
    - password
    - S

- name: AD.1.1.2 | AUDIT_RHEL | PASSWORD | Default password minimal length (login.defs)
  debug:
    msg: "{{ harden_rhel7_pass_min_len  }}"
  when: 
    - ad_1_1_2
    - ansible_check_mode
    - __ad_1_1_2 | changed
  tags:
    - AD.1.1.2
    - audit
    - password
    - S

- name: AD.1.1.2 | PATCH_RHEL | PASSWORD | Complexity (PAM)
  pamd:
    name: "{{ item.name }}"
    type: account
    control: required
    module_path: pam_permit.so
    new_type: password
    new_module_path: pam_cracklib.so
    new_control: required        
    module_arguments: try_first_pass retry=3 minlen=8 lcredit=-1 ucredit=-1 dcredit=-1 ocredit=-1
    state: after
  with_items: "{{ harden_rhel7_pam_system_password }}"
  when: ad_1_1_2
  register: __ad_1_1_2
  tags:
    - AD.1.1.2
    - patch
    - password
    - S

- name: AD.1.1.2 | AUDIT_RHEL | PASSWORD | Complexity (PAM)
  debug:
    msg: "{{ __ad_1_1_2.results }}"
  when: 
    - ad_1_1_2
    - ansible_check_mode
    - __ad_1_1_2 | changed
  tags:
    - AD.1.1.2
    - audit
    - password
    - S

#
# --------------------------------- AD.1.1.3.1 ---------------------------------
#
- name: AD.1.1.3.1 | GATHER_INFO_RHEL | PASSWORD | Default minimum number of days that must elapse between password changes (login.defs)
  shell: grep PASS_MIN_DAYS /etc/login.defs
  register: pass_min_days
  changed_when: no
  check_mode: no
  tags:
    - AD.1.1.3.1
    - audit
    - password
    - S

- name: AD.1.1.3.1 | PATCH_RHEL | PASSWORD | Default minimum number of days that must elapse between password changes (login.defs)
  lineinfile:
    regexp: '(^PASS_MIN_DAYS)\s*(\d*)'
    line: '\1 {{ harden_rhel7_pass_min_days }}'
    dest: /etc/login.defs
    backrefs: yes
  when: ad_1_1_3_1
  register: __ad_1_1_3_1
  tags:
    - AD.1.1.3.1
    - patch
    - password
    - S

- name: AD.1.1.3.1 | AUDIT_RHEL | PASSWORD | Default minimum number of days that must elapse between password changes (login.defs)
  debug:
    msg: "{{ pass_min_days.stdout_lines }}"
  when: 
    - ad_1_1_3_1
    - ansible_check_mode
    - __ad_1_1_3_1 | changed
  tags:
    - AD.1.1.3.1
    - audit
    - password
    - S

#
# --------------------------------- AD.1.1.3.2 ---------------------------------
#
- name: AD.1.1.3.2 | GATHER_INFO_RHEL | PASSWORD | Per-userid min number of days between user-initiated password changes (shadow) 
  shell: awk -F':' '($1 != "root" &&  $2 != "*" && $2 != "!!") { print $1 }' /etc/shadow
  register: shadow_users
  changed_when: no
  check_mode: no
  tags:
    - AD.1.1.3.2
    - audit
    - password 
    - S

- name: AD.1.1.3.2 | PATCH_RHEL | PASSWORD | Per-userid min number of days between user-initiated password changes (shadow) 
  chage: 
    user: "{{ item }}"
    sp_min: "{{ harden_rhel7_pass_min_days }}"
  when: ad_1_1_3_2
  register: __ad_1_1_3_2
  with_items:
    - "{{ shadow_users.stdout_lines | difference(harden_rhel7_exclude_users) }}"
  tags: 
    - AD.1.1.3.2
    - patch
    - password 
    - S

- name: AD.1.1.3.2 | AUDIT_RHEL | PASSWORD | Per-userid min number of days between user-initiated password changes (shadow)
  debug:
    msg: "{{ shadow_users.stdout_lines }}"
  when: 
    - ad_1_1_3_2
    - ansible_check_mode
    - __ad_1_1_3_2 | changed
  tags:
    - AD.1.1.3.2
    - audit
    - password
    - S

#
# --------------------------------- AD.1.1.4.1 ---------------------------------
#
- name: AD.1.1.4.1 | PATCH_RHEL | PASSWORD | Prevent reuse of last eight passwords (PAM)
  pamd:
    name: "{{ item.name }}"
    type: password
    control: sufficient
    module_path: pam_unix.so
    module_arguments: remember=9 use_authtok sha512 shadow
  with_items: "{{ harden_rhel7_pam_system_password }}"
  when: ad_1_1_4_1
  register: __ad_1_1_4_1
  tags:
    - AD.1.1.4.1
    - patch
    - password
    - S

- name: AD.1.1.4.1 | AUDIT_RHEL | PASSWORD | Prevent reuse of last eight passwords (PAM)
  debug:
    msg: "{{ harden_rhel7_pam_system_password }}"
  when: 
    - ad_1_1_4_1
    - ansible_check_mode
    - __ad_1_1_4_1 | changed
  tags:
    - AD.1.1.4.1
    - audit
    - password
    - S

#
# --------------------------------- AD.1.1.6.0 ---------------------------------
#
- name: AD.1.1.6.0 | PATCH_RHEL | PASSWORD | Threshold for consecutive failed login attempts (PAM)
  pamd:
    name: "{{ item.name }}"
    type: auth
    control: required
    module_path: pam_env.so
    new_type: auth
    new_control: required
    new_module_path: pam_tally2.so
    module_arguments: deny=10
    state: after
  with_items: "{{ harden_rhel7_pam_system_password }}"
  when: ad_1_1_6_0
  register: __ad_1_1_6_0
  tags:
    - AD.1.1.6.0
    - patch
    - password
    - S

- name: AD.1.1.6.0 | AUDIT_RHEL | PASSWORD | Threshold for consecutive failed login attempts (PAM)
  debug:
    msg: "{{ __ad_1_1_6_0.results }}"
  when: 
    - ad_1_1_4_1
    - ansible_check_mode
    - __ad_1_1_6_0 | changed
  tags:
    - AD.1.1.6.0
    - audit
    - password
    - S

#
# --------------------------------- AD.1.1.7.1 ---------------------------------
#
- name: AD.1.1.7.1 | PATCH_RHEL | PASSWORD | PermitRootLogin no (sshd_config)
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^PermitRootLogin yes'
    insertafter: '^#PermitRootLogin yes'
    line: PermitRootLogin no
  when: ad_1_1_7_1
  register: __ad_1_1_7_1
  tags:
    - AD.1.1.7.1
    - patch
    - password
    - S

- name: AD.1.1.7.1 | AUDIT_RHEL | PASSWORD | PermitRootLogin no (sshd_config)
  debug:
    msg: PermitRootLogin no | not set
  when: 
    - ad_1_1_7_1
    - ansible_check_mode
    - __ad_1_1_7_1 | changed
  tags:
    - AD.1.1.7.1
    - audit
    - password
    - S

#
# --------------------------------- AD.1.1.7.2 ---------------------------------
#
- name: AD.1.1.7.2 | PATCH_RHEL | PASSWORD | Login access for "root" must be restricted to the physical console (securetty)
  lineinfile:
    state: absent
    dest: /etc/securetty
    regexp: '^.*vc/?\d'
    backup: yes
  when: ad_1_1_7_2
  register: __ad_1_1_7_2
  tags:
    - AD.1.1.7.2
    - patch
    - password
    - S

- name: AD.1.1.7.2 | AUDIT_RHEL | PASSWORD | Login access for "root" must be restricted to the physical console (securetty)
  debug:
    msg: "{{ __ad_1_1_7_2.msg  }}"
  when: 
    - ad_1_1_7_2
    - ansible_check_mode
    - __ad_1_1_7_2 | changed
  tags:
    - AD.1.1.7.2
    - audit
    - password
    - S

#
# --------------------------------- AD.1.1.7.3 ---------------------------------
#
- name: AD.1.1.7.3 | NO_REMEDIATION_RHEL | PASSWORD | Access via Password must be blocked (shadow)
  shell: awk -F':' '($1 != "root" && $2 != "*" && $2 != "!!") { print $1 }' /etc/shadow
  register: shadow_password
  changed_when: no
  check_mode: no
  tags:
    - ad_1_1_7_3
    - audit
    - password
    - S

- name: AD.1.1.7.3 | AUDIT_RHEL | PASSWORD | NO_REMEDIATION | Access via Password must be blocked (shadow)
  debug:
    msg: "{{ shadow_password.stdout_lines }} these users have local passwords"
  when: 
    - ad_1_1_7_3
    - ansible_check_mode
  tags:
    - AD.1.1.7.3
    - audit
    - password
    - S

#
# --------------------------------- AD.1.1.8.2 ---------------------------------
#
- name: AD.1.1.8.2 | NO_REMEDIATION_RHEL | PASSWORD | Prevent UID reuse (passwd)
  shell: awk -F':' '{print $3}' /etc/passwd | sort | uniq -d
  register: passwd_dup_id
  changed_when: no
  check_mode: no
  tags:
    - AD.1.1.8.2
    - audit
    - password
    - S

- name: AD.1.1.8.2 | AUDIT_RHEL | PASSWORD | NO_REMEDIATION | Prevent UID reuse (passwd)
  debug:
    msg: "These {{ passwd_dup_id.stdout_lines }} are duplicate UIDs"
  when: 
    - ad_1_1_8_2
    - ansible_check_mode
  tags:
    - AD.1.1.8.2
    - audit
    - password
    - S

#
# --------------------------------- AD.1.1.8.3 ---------------------------------
#
- name: AD.1.1.8.3 | NO_REMEDIATION_RHEL | PASSWORD | Prevent GID reuse (group)
  shell: awk -F':' '{print $3}' /etc/group | sort | uniq -d
  register: group_dup_id
  changed_when: no
  check_mode: no
  tags:
    - ad_1_1_8_3
    - audit
    - password
    - S

- name: AD.1.1.8.3 | AUDIT_RHEL | PASSWORD | NO_REMEDIATION |  Prevent GID reuse (group)
  debug:
    msg: "These {{ group_dup_id.stdout_lines }} are duplicate GIDs"
  when: 
    - ad_1_1_8_3
    - ansible_check_mode
  tags:
    - AD.1.1.8.3
    - audit
    - password
    - S

#
# --------------------------------- AD.1.1.9.1 ---------------------------------
#
- name: AD.1.1.9.1 | PATCH_RHEL | PASSWORD | Exemptions to password rules, Non expiring password
  lineinfile:
    path: /etc/login.defs
    regexp: '^PASS_MAX_DAYS'
    line: "PASS_MAX_DAYS           99999"
    backrefs: yes
  when: ad_1_1_9_1
  register: __ad_1_1_9_1
  tags: 
    - AD.1.1.9.1
    - patch
    - password  
    - S

- name: AD.1.1.9.1 | AUDIT_RHEL | PASSWORD | Exemptions to password rules, Non expiring password
  debug:
    msg: "{{ __ad_1_1_9_1.msg }}"
  when: 
    - ad_1_1_9_1
    - ansible_check_mode
    - __ad_1_1_9_1 | changed
  tags:
    - AD.1.1.9.1
    - audit
    - password
    - S

#
# --------------------------------- AD.1.1.10.1 ---------------------------------
#
- name: AD.1.1.10.1 | GATHER_INFO_RHEL | PASSWORD | Value of login shell attribute in /etc/passwd must be /sbin/nologin
  shell: awk -F':' '($1 != "root" && $7 != "/sbin/nologin" && $7 != "/bin/false") { print $1 }' /etc/passwd
  register: users_login_shell
  changed_when: no
  check_mode: no
  tags:
    - AD.1.1.10.1
    - audit
    - password
    - S

- name: AD.1.1.10.1 | PATCH_RHEL | PASSWORD | Value of login shell attribute in /etc/passwd must be /sbin/nologin
  lineinfile:
    path: /etc/passwd
    backrefs: yes
    regexp: '^({{ item }}):(.*):([0-9]*):([0-9]*):(.*):(.*):(.*)'
    line: '{{ item }}:\2:\3:\4:\5:\6:/bin/false'
  with_items: "{{ users_login_shell.stdout_lines }}"
  when: ad_1_1_10_1
  register: __ad_1_1_10_1
  tags:
    - AD.1.1.10.1
    - patch
    - password
    - S

- name: AD.1.1.10.1 | AUDIT_RHEL | PASSWORD | Value of login shell attribute in /etc/passwd must be /sbin/nologin
  debug:
    msg: "{{ users_login_shell.stdout_lines }}"
  when: 
    - ad_1_1_10_1
    - ansible_check_mode
    - __ad_1_1_10_1 | changed
  tags:
    - AD.1.1.10.1
    - audit
    - password
    - S

#
# --------------------------------- AD.1.1.10.2 ---------------------------------
#
- name: AD.1.1.10.2 | GATHER_INFORMATION_RHEL | PASSWORD | Restrict ftp access
  stat:
    path: /etc/ftpusers
  when: ad_1_1_10_2
  register: __ad_1_1_10_2_ftpstat
  tags:
    - AD.1.1.10.2
    - patch
    - password
    - S

- name: AD.1.1.10.2 | PATCH_RHEL | PASSWORD | Restrict ftp access
  lineinfile:
    path: /etc/ftpusers
    line: "{{ item }}"
  with_items: "{{ ftpusers }}"
  when:
    - ad_1_1_10_2
    - __ad_1_1_10_2_ftpstat.stat.exists
  register: __ad_1_1_10_2
  tags:
    - AD.1.1.10.2
    - patch
    - password
    - S

- name: AD.1.1.10.2 | AUDIT_RHEL | PASSWORD | Restrict ftp access
  debug:
    msg: "{{ __ad_1_1_10_2 }}"
  when: 
    - ad_1_1_10_2
    - ansible_check_mode
    - __ad_1_1_10_2_ftpstat.stat.exists
    - __ad_1_1_10_2 | changed
  tags:
    - AD.1.1.10.2
    - audit
    - password
    - S

#
# --------------------------------- AD.1.1.12.1 ---------------------------------
#
- name: AD.1.1.12.1 | GATHER_INFO_RHEL | PASSWORD | "x","!", "!!", or "*" specified in the password (2nd) field of the userid
  shell: awk -F':' '($1 != "root" && $2 != "*" && $2 != "!!") { print $1}' /etc/shadow
  register: shadow_lock
  changed_when: no
  check_mode: no
  tags:
    - AD.1.1.12.1
    - audit
    - password
    - S

- name: AD.1.1.12.1 | PATCH_RHEL | PASSWORD | "x","!", "!!", or "*" specified in the password (2nd) field of the userid
  lineinfile:
    path: /etc/shadow
    backrefs: yes
    regexp: '^({{ item }}):(.*):(.*):(.*):(.*):(.*):(.*):(.*):(.*)'
    line: '{{ item }}:!!:\3:\4:\5:\6:\7:\8:\9'
  with_items: "{{ shadow_lock.stdout_lines }}"
  when: ad_1_1_12_1
  register: __ad_1_1_12_1
  tags:
    - AD.1.1.12.1
    - patch
    - password
      - S

- name: AD.1.1.12.1 | AUDIT_RHEL | PASSWORD | "x","!", "!!", or "*" specified in the password (2nd) field of the userid
  debug:
    msg: "{{ shadow_lock.stdout_lines }}"
  when: 
    - ad_1_1_12_1
    - ansible_check_mode
    - __ad_1_1_12_1 | changed
  tags:
    - AD.1.1.12.1
    - audit
    - password
    - S

#
# --------------------------------- AD.1.1.13.3 ---------------------------------
#
- name: AD.1.1.13.3 | GATHER_INFO_RHEL | PASSWORD | Restrict ftp access
  stat:
    path: /etc/ftpusers
  when: ad_1_1_13_3
  register: __ad_1_1_13_3_ftpstat
  tags:
    - AD.1.1.13.3
    - audit
    - password
    - S

- name: AD.1.1.13.3 | PATCH_RHEL | PASSWORD | Restrict ftp access
  lineinfile:
    path: /etc/ftpusers
    line: "{{ item }}"
  with_items: "{{ ftpusers }}"
  when:
    - ad_1_1_13_3
    - __ad_1_1_13_3_ftpstat.stat.exists
  register: __ad_1_1_13_3
  tags:
    - AD.1.1.13.3
    - patch
    - password
    - S

- name: AD.1.1.13.3 | AUDIT_RHEL | PASSWORD | Restrict ftp access
  debug:
    msg: "{{ __ad_1_1_13_3 }}"
  when: 
    - ad_1_1_13_3
    - ansible_check_mode
    - __ad_1_1_13_3_ftpstat.stat.exists
    - __ad_1_1_13_3 | changed
  tags:
    - AD.1.1.13.3
    - audit
    - password
    - S

- name: AD.1.1.13.3 | GATHER_INFO_RHEL | PASSWORD | Restrict vsftp access
  stat:
    path: /etc/vsftpd/ftpusers
  when: ad_1_1_13_3
  register: __ad_1_1_13_3_vsftpstat
  tags:
    - AD.1.1.13.3
    - audit
    - password
    - S

- name: AD.1.1.13.3 | PATCH_RHEL | PASSWORD | Restrict vsftp access
  lineinfile:
    path: /etc/vsftpd/ftpusers
    line: "{{ item }}"
  with_items: "{{ ftpusers }}"
  when:
    - ad_1_1_13_3
    - __ad_1_1_13_3_vsftpstat.stat.exists
  register: __ad_1_1_13_3_vs
  tags:
    - AD.1.1.13.3
    - patch
    - password
    - S

- name: AD.1.1.13.3 | AUDIT_RHEL | PASSWORD | Restrict vsftp access
  debug:
    msg: "{{ __ad_1_1_13_3_vs }}"
  when: 
    - ad_1_1_13_3
    - ansible_check_mode
    - __ad_1_1_13_3_vsftpstat.stat.exists
    - __ad_1_1_13_3_vs | changed
  tags:
    - AD.1.1.13.3
    - audit
    - password
    - S

#
# --------------------------------- AD.1.1.13.4 ---------------------------------
#
- name: AD.1.1.13.4 | PATCH_RHEL | PASSWORD | UsePAM yes (sshd_config)
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^UsePAM yes'
    insertafter: '^#UsePAM yes'
    line: UsePAM yes
  when: ad_1_1_13_4
  register: __ad_1_1_13_4
  tags:
    - AD.1.1.13.4
    - patch
    - password
    - S

- name: AD.1.1.13.4 | AUDIT_RHEL | PASSWORD | UsePAM yes (sshd_config)
  debug:
    msg: UsePAM yes | not set
  when: 
    - ad_1_1_13_4
    - ansible_check_mode
    - __ad_1_1_13_4 | changed
  tags:
    - AD.1.1.13.4
    - audit
    - password
    - S

